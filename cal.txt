#include <stdio.h>
#include <math.h>

// Function to add two numbers
float add(float num1, float num2) {
    return num1 + num2;
}

// Function to subtract two numbers
float subtract(float num1, float num2) {
    return num1 - num2;
}

// Function to multiply two numbers
float multiply(float num1, float num2) {
    return num1 * num2;
}

// Function to divide two numbers
float divide(float num1, float num2) {
    // Check for division by zero
    if (num2 != 0) {
        return num1 / num2;
    } else {
        printf("Error: Division by zero is undefined.\n");
        return 0; // You can modify this return value as needed
    }
}

// Function to calculate sine
float sine(float angle) {
    return sin(angle);
}

// Function to calculate cosine
float cosine(float angle) {
    return cos(angle);
}

// Function to calculate tangent
float tangent(float angle) {
    return tan(angle);
}

// Function to calculate arcsine
float arcsine(float value) {
    return asin(value);
}

// Function to calculate arccosine
float arccosine(float value) {
    return acos(value);
}

// Function to calculate arctangent
float arctangent(float value) {
    return atan(value);
}

// Function to calculate exponentiation
float power(float base, float exponent) {
    return pow(base, exponent);
}

// Function to calculate square root
float squareRoot(float value) {
    return sqrt(value);
}

// Function to calculate cube root
float cubeRoot(float value) {
    return cbrt(value);
}

// Function to calculate nth root
float nthRoot(float value, float n) {
    return pow(value, 1.0 / n);
}

// Function to calculate factorial
unsigned long long factorial(int n) {
    if (n == 0 || n == 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

// Function to calculate absolute value
float absoluteValue(float value) {
    return fabs(value);
}

// Function to calculate mean
float mean(float numbers[], int size) {
    float sum = 0;
    for (int i = 0; i < size; ++i) {
        sum += numbers[i];
    }
    return sum / size;
}

// Function to calculate median
float median(float numbers[], int size) {
    int middle = size / 2;
    if (size % 2 == 0) {
        return (numbers[middle - 1] + numbers[middle]) / 2.0;
    } else {
        return numbers[middle];
    }
}

// Function to calculate mode
float mode(float numbers[], int size) {
    // Mode is the most frequently occurring number
    // This function returns the first mode found in the array
    int maxCount = 0, mode = numbers[0], count;

    for (int i = 0; i < size; ++i) {
        count = 0;
        for (int j = 0; j < size; ++j) {
            if (numbers[j] == numbers[i])
                ++count;
        }
        if (count > maxCount) {
            maxCount = count;
            mode = numbers[i];
        }
    }

    return mode;
}

// Function to calculate variance
float variance(float numbers[], int size) {
    float meanValue = mean(numbers, size);
    float sumSquaredDiffs = 0;

    for (int i = 0; i < size; ++i) {
        sumSquaredDiffs += pow(numbers[i] - meanValue, 2);
    }

    return sumSquaredDiffs / size;
}

// Function to calculate standard deviation
float standardDeviation(float numbers[], int size) {
    return sqrt(variance(numbers, size));
}

int main() {
    float num1, num2, result, angle, value, exponent, nth_root_value, base;
    int n, size;
    char operator;

    // Input two numbers, an angle/value, or a number for statistical operation and operator
    printf("Enter the size of the array for statistical operations: ");
    scanf("%d", &size);

    float numbers[size];

    printf("Enter %d numbers: ", size);
    for (int i = 0; i < size; ++i) {
        scanf("%f", &numbers[i]);
    }

    printf("Enter operator (+, -, *, /, sin, cos, tan, asin, acos, atan, ^, sqrt, cbrt, nthrt, !, |, log10, ln, logn, mean, median, mode, variance, sd): ");
    scanf(" %c", &operator); // Note the space before %c to consume the newline character

    // Check if the operator is for trigonometric functions, logarithmic operations, or statistical operations
    if (operator != 'sin' && operator != 'cos' && operator != 'tan' &&
        operator != 'asin' && operator != 'acos' && operator != 'atan' &&
        operator != '^' && operator != 'sqrt' && operator != 'cbrt' &&
        operator != 'nthrt' && operator != '!' && operator != '|' &&
        operator != 'log10' && operator != 'ln' && operator != 'logn' &&
        operator != 'mean' && operator != 'median' && operator != 'mode' &&
        operator != 'variance' && operator != 'sd') {
        printf("Enter second number: ");
        scanf("%f", &num2);
    }

    // Perform calculation based on the operator
    switch (operator) {
        case '+':
            result = add(num1, num2);
            break;
        case '-':
            result = subtract(num1, num2);
            break;
        case '*':
            result = multiply(num1, num2);
            break;
        case '/':
            result = divide(num1, num2);
            break;
        case 'sin':
            result = sine(num1);
            break;
        case 'cos':
            result = cosine(num1);
            break;
        case 'tan':
            result = tangent(num1);
            break;
        case 'asin':
            result = arcsine(num1);
            break;
        case 'acos':
            result = arccosine(num1);
            break;
        case 'atan':
            result = arctangent(num1);
            break;
        case '^':
            result = power(num1, num2);
            break;
        case 'sqrt':
            result = squareRoot(num1);
            break;
        case 'cbrt':
            result = cubeRoot(num1);
            break;
        case 'nthrt':
            printf("Enter the value of n for nth root: ");
            scanf("%d", &n);
            result = nthRoot(num1, n);
            break;
        case '!':
            result = factorial((int)num1);
            break;
        case '|':
            result = absoluteValue(num1);
            break;
        case 'log10':
            result = logBase10(num1);
            break;
        case 'ln':
            result = logBaseE(num1);
            break;
        case 'logn':
            printf("Enter the base for logarithm: ");
            scanf("%f", &base);
            result = logBaseN(num1, base);
            break;
        case 'mean':
            result = mean(numbers, size);
            break;
        case 'median':
            result = median(numbers, size);
            break;
        case 'mode':
            result = mode(numbers, size);
            break;
        case 'variance':
            result = variance(numbers, size);
            break;
        case 'sd':
            result = standardDeviation(numbers, size);
            break;
        default:
            printf("Error: Invalid operator.\n");
            return 1; // You can modify this return value as needed
    }

    // Display the result
    printf("Result: %.4f\n", result);

    return 0;
}
